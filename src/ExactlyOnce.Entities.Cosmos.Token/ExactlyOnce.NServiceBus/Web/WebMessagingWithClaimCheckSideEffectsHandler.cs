using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using ExactlyOnce.Core;
using NServiceBus.Extensibility;
using NServiceBus.Logging;
using NServiceBus.Transport;

namespace ExactlyOnce.NServiceBus.Web
{
    class WebMessagingWithClaimCheckSideEffectsHandler : SideEffectsHandler<OutgoingMessageRecord>
    {
        readonly IMessageStore messageStore;
        readonly IDispatchMessages dispatcher;

        static readonly ILog log = LogManager.GetLogger<WebMessagingWithClaimCheckSideEffectsHandler>();

        public WebMessagingWithClaimCheckSideEffectsHandler(IMessageStore messageStore, IDispatchMessages dispatcher)
        {
            this.messageStore = messageStore;
            this.dispatcher = dispatcher;
        }

        protected override async Task Publish(string messageId, Guid attemptId,
            IEnumerable<OutgoingMessageRecord> committedSideEffects,
            IEnumerable<OutgoingMessageRecord> abortedSideEffects)
        {
            var operations = committedSideEffects.Select(r => r.ToTransportOperation()).ToArray();
            if (log.IsDebugEnabled)
            {
                log.Debug($"Dispatching messages {string.Join(",", operations.Select(o => o.Message.MessageId))} generated by attempt {attemptId} of transaction {messageId}.");
            }
            await dispatcher.Dispatch(new TransportOperations(operations), new TransportTransaction(), new ContextBag())
                .ConfigureAwait(false);

            var abortedIds = abortedSideEffects.Select(r => r.Id).ToArray();
            if (log.IsDebugEnabled)
            {
                log.Debug($"Removing tokens for aborted message send attempts {string.Join(", ", abortedIds)}");
            }
            await messageStore.EnsureDeleted(abortedIds)
                .ConfigureAwait(false);
        }
    }
}